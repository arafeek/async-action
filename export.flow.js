/**
 * Flowtype definitions for async.types.ts
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 */

import { Dispatch, Action } from 'redux';
declare type Status =
  | 'ASYNC_COMPLETE'
  | 'ASYNC_PENDING'
  | 'ASYNC_FAILED'
  | 'ASYNC_DEDUPED'
  | 'ASYNC_CACHED'
  | 'ASYNC_RESET';
export type AsyncAction<A: Action, PayloadType> = A & {
  payload?: PayloadType | null,
  error?: ErrorInfo | null,
  meta: {
    status: Status,
    identifier?: string,
    ...
  },
  ...
};
export type AAction<
  ActionType: string,
  PayloadType,
  ActionFields = { [key: string]: any },
> = {
  type: ActionType,
  ...
} & ActionFields & {
    payload?: PayloadType | null,
    error?: ErrorInfo | null,
    meta: {
      status: Status,
      identifier?: string,
      ...
    },
    ...
  };
export type GetState<
  State: { [key: string]: any } = { [key: string]: any },
> = () => State;
export type AsyncThunk<
  Payload,
  State: { [key: string]: any } = { [key: string]: any },
> = (dispatch: Dispatch, getState: GetState<State>) => Promise<Payload>;
export type AsyncActionOptions = {
  identifier?: string,
  cache?: boolean,
  overwriteCache?: boolean,
  ttlSeconds?: number,
  ...
};
export type ErrorInfo = {
  name: string,
  message: string,
  stack?: string,
  ...
};
export type AsyncActionRecord = {
  pending: boolean,
  error?: ErrorInfo,
  __do_not_use__response_cache?: {
    value: any,
    secondsSinceEpoch: number,
    ...
  },
  ...
};
export type AsyncActionState = {
  [actionType: string]: {
    [identifier: string]: AsyncActionRecord,
    ...,
  },
  ...,
};
export type AllPendingSelector<S = { [key: string]: any }> = (
  state: S,
) => string[];
export type IsPendingSelector<S = { [key: string]: any }> = (
  state: S,
) => boolean;
export type ErrorSelector<S = { [key: string]: any }> = (
  state: S,
) => ErrorInfo | void | null;
